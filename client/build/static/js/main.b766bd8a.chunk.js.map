{"version":3,"sources":["pages/homepage.js","utils/API.js","component/Login.js","pages/loginpage.js","component/Registration.js","pages/register.js","App.js","serviceWorker.js","index.js"],"names":["Homepage","Component","render","id","className","loginInfo","axios","post","playerData","Login","constructor","props","super","onHandleSubmit","event","console","log","preventDefault","this","state","username","password","API","then","res","data","catch","err","onHandleChange","setState","target","name","value","onSubmit","htmlFor","type","onChange","required","loggedIn","bind","LoginPage","Registration","Register","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"wPAGA,MAAMA,UAAiBC,YAAW,eAAD,oBAC5BC,OAAS,IAEC,6BACK,wBAAIC,GAAG,SAAP,KAAiB,0BAAMA,GAAG,YAAT,UAAjB,KAA+C,0BAAMA,GAAG,YAAT,KAA/C,KAEA,yBAAKC,UAAU,aACV,yBAAKD,GAAG,cACH,uBAAGA,GAAG,mBAAN,WACA,uBAAGC,UAAU,cAAb,uDACA,6BACA,uBAAGA,UAAU,qBAAb,yBACA,uBAAGA,UAAU,mBAAkB,0BAAMA,UAAU,UAAhB,KAA/B,uCACA,uBAAGA,UAAU,mBAAkB,0BAAMA,UAAU,UAAhB,KAA/B,eACA,6BACA,uBAAGA,UAAU,cAAb,iBACA,uBAAGA,UAAU,cAAb,aACA,6BACA,uBAAGA,UAAU,cAAb,6BAAoD,0BAAMA,UAAU,OAAhB,WACpD,8BAEL,yBAAKD,GAAG,cACH,yCAhBV,IAgBiC,+CAOtCH,Q,gCC9BA,EAEC,SAAUK,GAChB,OAAOC,IAAMC,KAAK,iBAAkBF,IAH/B,EAcM,SAAUG,GACrB,OAAOF,IAAMC,KAAK,iBAAkBC,I,MCb9C,MAAMC,UAAcR,YACfS,YAAYC,GACPC,MAAMD,GADQ,KAanBE,eAAkBC,IACbC,QAAQC,IAAI,kCACZF,EAAMG,iBACFC,KAAKC,MAAMC,UAAYF,KAAKC,MAAME,UACjCC,EAAc,CACTF,SAAUF,KAAKC,MAAMC,SACrBC,SAAUH,KAAKC,MAAME,WAEpBE,KAAKC,IACDT,QAAQC,IAAI,kBACZD,QAAQC,IAAIQ,EAAIC,QAEpBC,MAAMC,GAAOZ,QAAQC,IAAIW,KAzBtB,KA6BnBC,eAAkBd,IACbC,QAAQC,IAAI,gBAAiBF,GAC7BI,KAAKW,SAAS,CACT,CAACf,EAAMgB,OAAOC,MAAOjB,EAAMgB,OAAOE,SAhCzB,KAoCnB9B,OAAS,IAEC,yBAAKE,UAAU,aACV,yBAAKA,UAAU,cACV,uBAAGA,UAAU,mBAAb,SAGA,uBAAGA,UAAU,cAAb,8BAGA,uBAAGA,UAAU,cAAb,0BAGA,6BACA,0BAAM6B,SAAUf,KAAKL,gBAChB,2BAAOqB,QAAQ,YAAf,aACA,2BACKC,KAAK,OACLJ,KAAK,WACLC,MAAOd,KAAKC,MAAMC,SAClBgB,SAAUlB,KAAKU,eACfS,UAAQ,IAEb,6BACA,6BACA,2BAAOH,QAAQ,YAAf,aACA,2BACKC,KAAK,WACLJ,KAAK,WACLC,MAAOd,KAAKC,MAAME,SAClBe,SAAUlB,KAAKU,eACfS,UAAQ,IAEb,6BACA,6BAEA,4BAAQlC,GAAG,SAASgC,KAAK,UAAzB,YArEpBjB,KAAKC,MAAQ,CACRC,SAAU,GACVC,SAAU,GACViB,UAAU,GAGfpB,KAAKL,eAAiBK,KAAKL,eAAe0B,KAAKrB,MAC/CA,KAAKU,eAAiBV,KAAKU,eAAeW,KAAKrB,OAsE1CT,QClFf,MAAM+B,UAAkBvC,YAAW,eAAD,oBAC7BC,OAAS,IAEC,6BACK,kBAAC,EAAD,QAMLsC,QCTf,MAAMC,UAAqBxC,YACtBS,YAAaC,GACRC,MAAMD,GADS,KAYpBE,eAAkBC,IACbC,QAAQC,IAAI,wBACZF,EAAMG,iBACFC,KAAKC,MAAMC,UAAYF,KAAKC,MAAME,WACjCN,QAAQC,IAAI,qCACZM,EAAmB,CACdF,SAAUF,KAAKC,MAAMC,SACrBC,SAAUH,KAAKC,MAAME,WAEpBE,KAAKC,IACDT,QAAQC,IAAI,mBACZD,QAAQC,IAAIQ,EAAIC,QAEpBC,MAAMC,GAAOZ,QAAQC,IAAIW,MAzBrB,KA6BpBC,eAAkBd,IACbC,QAAQC,IAAI,gBAAiBF,GAC7BI,KAAKW,SAAU,CACV,CAACf,EAAMgB,OAAOC,MAAOjB,EAAMgB,OAAOE,SAhCxB,KAoCpB9B,OAAS,IAEC,yBAAKE,UAAU,aACV,yBAAKA,UAAU,cACV,uBAAGA,UAAU,mBAAb,gBAGA,uBAAGA,UAAU,cAAb,4BAGA,uBAAGA,UAAU,cAAb,sBAGA,6BACA,0BAAM6B,SAAaf,KAAKL,gBACnB,2BAAOqB,QAAQ,YAAf,aACA,2BACKC,KAAK,OACLJ,KAAK,WACLC,MAAOd,KAAKC,MAAMC,SAClBgB,SAAUlB,KAAKU,eACfS,UAAQ,IAEb,6BACA,6BACA,2BAAOH,QAAQ,YAAf,aACA,2BACKC,KAAK,WACLJ,KAAK,WACLC,MAAOd,KAAKC,MAAME,SAClBe,SAAUlB,KAAKU,eACfS,UAAQ,IAEb,6BACA,6BAEA,4BAAQlC,GAAG,SAASgC,KAAK,UAAzB,eArEpBjB,KAAKC,MAAQ,CACRC,SAAU,GACVC,SAAU,IAGfH,KAAKL,eAAiBK,KAAKL,eAAe0B,KAAKrB,MAC/CA,KAAKU,eAAiBV,KAAKU,eAAeW,KAAKrB,OAuE1CuB,QClFf,MAAMC,UAAiBzC,YAAW,eAAD,oBAC5BC,OAAS,IAEC,6BACK,kBAAC,EAAD,QAMLwC,QCNf,MAAMC,UAAY1C,YAAW,eAAD,oBACvBC,OAAS,IAEC,kBAAC,IAAD,KACK,kBAAC,IAAD,KACK,kBAAC,IAAD,CAAO0C,OAAK,EAACC,KAAK,IAAIC,UAAc9C,IACpC,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,YAAYC,UAAc9C,IAC5C,kBAAC,IAAD,CAAO4C,OAAK,EAACC,KAAK,SAASC,UAAcrC,IACzC,kBAAC,IAAD,CAAOmC,OAAK,EAACC,KAAK,YAAYC,UAAYJ,OAOpDC,QCVKI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASlD,OACL,kBAAC,EAAD,MACFmD,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,KAAKmC,IACJA,EAAaC,eAEdjC,MAAMkC,IACL7C,QAAQ6C,MAAMA,EAAMC,a","file":"static/js/main.b766bd8a.chunk.js","sourcesContent":["import React, { Component } from \"react\"\r\nimport './homepage.css'\r\n\r\nclass Homepage extends Component {     \r\n     render = () => {\r\n          return (\r\n               <div>\r\n                    <h1 id=\"title\">TR<span id=\"redTitle\">Λ</span>CC<span id=\"redTitle\">V</span>R</h1>\r\n\r\n                    <div className=\"container\">\r\n                         <div id=\"splashWrap\">\r\n                              <p id=\"splashTextTitle\">WELCOME</p>\r\n                              <p className=\"splashText\">TRΛCCVR is a browser-based mouse tracking game</p>\r\n                              <br />\r\n                              <p className=\"splashText yellow\">THE RULES ARE SIMPLE:</p>\r\n                              <p className=\"splashTextRules\"><span className=\"yellow\">1</span>] FOLLOW THE TARGET WITH YOUR MOUSE</p>\r\n                              <p className=\"splashTextRules\"><span className=\"yellow\">2</span>] THAT'S IT</p>\r\n                              <br />\r\n                              <p className=\"splashText\">SOUND SIMPLE?</p>\r\n                              <p className=\"splashText\">TOLD YOU!</p>\r\n                              <br />\r\n                              <p className=\"splashText\">BUT BE CAREFUL... IT GETS <span className=\"red\">HARDER</span></p>\r\n                              <br />\r\n                         </div>\r\n                         <div id=\"animation\"></div>\r\n                              <button>LOGIN</button> <button>REGISTER</button>\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default Homepage;","import axios from \"axios\";\r\n\r\nexport default {\r\n     // Gets all books\r\n     getPlayer: function (loginInfo) {\r\n          return axios.post(\"/api/getplayer\", loginInfo);\r\n     },\r\n     // // Gets the book with the given id\r\n     // getBook: function (id) {\r\n     //      return axios.get(\"/api/books/\" + id);\r\n     // },\r\n     // // Deletes the book with the given id\r\n     // deleteBook: function (id) {\r\n     //      return axios.delete(\"/api/books/\" + id);\r\n     // },\r\n     // Saves a book to the database\r\n     registerPlayer: function (playerData) {\r\n          return axios.post(\"/api/regplayer\", playerData);\r\n     }\r\n};\r\n","import React, { Component } from 'react';\r\nimport API from \"../utils/API\";\r\nimport './LoginReg.css';\r\n\r\nclass Login extends Component {\r\n     constructor(props) {\r\n          super(props);\r\n\r\n          this.state = {\r\n               username: \"\",\r\n               password: \"\",\r\n               loggedIn: false\r\n          }\r\n\r\n          this.onHandleSubmit = this.onHandleSubmit.bind(this);\r\n          this.onHandleChange = this.onHandleChange.bind(this);\r\n     }\r\n\r\n     onHandleSubmit = (event) => {\r\n          console.log(\"form being submitted for login\");\r\n          event.preventDefault();\r\n          if (this.state.username && this.state.password) {\r\n               API.getPlayer({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n               })\r\n                    .then(res => {\r\n                         console.log(\"user logged in\");\r\n                         console.log(res.data);\r\n                    })\r\n                    .catch(err => console.log(err));\r\n          }\r\n     }\r\n\r\n     onHandleChange = (event) => {\r\n          console.log(\"handle change\", event);\r\n          this.setState({\r\n               [event.target.name]: event.target.value\r\n          })\r\n     }\r\n\r\n     render = () => {\r\n          return (\r\n               <div className=\"container\">\r\n                    <div className=\"splashWrap\">\r\n                         <p className=\"splashTextTitle\">\r\n                              Login\r\n                         </p>\r\n                         <p className=\"splashText\">\r\n                              Please enter your username\r\n                         </p>\r\n                         <p className=\"splashText\">\r\n                              and password to login.\r\n                         </p>\r\n                         <br />\r\n                         <form onSubmit={this.onHandleSubmit}>\r\n                              <label htmlFor=\"username\">Username </label>\r\n                              <input\r\n                                   type=\"text\"\r\n                                   name=\"username\"\r\n                                   value={this.state.username}\r\n                                   onChange={this.onHandleChange}\r\n                                   required\r\n                              />\r\n                              <br />\r\n                              <br />\r\n                              <label htmlFor=\"username\">Password </label>\r\n                              <input\r\n                                   type=\"password\"\r\n                                   name=\"password\"\r\n                                   value={this.state.password}\r\n                                   onChange={this.onHandleChange}\r\n                                   required\r\n                              />\r\n                              <br />\r\n                              <br />\r\n\r\n                              <button id=\"regBtn\" type=\"submit\">Login</button>\r\n                         </form>\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default Login;","import React, { Component } from \"react\";\r\nimport Login from '../component/Login.js';\r\n\r\nclass LoginPage extends Component {\r\n     render = () => {\r\n          return (\r\n               <div>\r\n                    <Login />\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default LoginPage;","import React, { Component } from 'react';\r\nimport API from \"../utils/API\";\r\nimport './LoginReg.css';\r\n\r\nclass Registration extends Component {\r\n     constructor (props) {\r\n          super(props);\r\n\r\n          this.state = {\r\n               username: \"\",\r\n               password: \"\"\r\n          }\r\n\r\n          this.onHandleSubmit = this.onHandleSubmit.bind(this);\r\n          this.onHandleChange = this.onHandleChange.bind(this);\r\n     }\r\n\r\n     onHandleSubmit = (event) => {\r\n          console.log(\"form being submitted\");\r\n          event.preventDefault();\r\n          if (this.state.username && this.state.password) {\r\n               console.log(\"Username and password are present\")\r\n               API.registerPlayer({\r\n                    username: this.state.username,\r\n                    password: this.state.password\r\n               })\r\n                    .then(res => {\r\n                         console.log(\"user registered\");\r\n                         console.log(res.data);\r\n                    })\r\n                    .catch(err => console.log(err));\r\n          }\r\n     }\r\n     \r\n     onHandleChange = (event) => {\r\n          console.log(\"handle change\", event);\r\n          this.setState ({\r\n               [event.target.name]: event.target.value\r\n          })\r\n     }\r\n\r\n     render = () => {\r\n          return (\r\n               <div className=\"container\">\r\n                    <div className=\"splashWrap\">\r\n                         <p className=\"splashTextTitle\">\r\n                              Registration\r\n                         </p>\r\n                         <p className=\"splashText\">\r\n                              Please fill out the form\r\n                         </p>\r\n                         <p className=\"splashText\">\r\n                              below to register.\r\n                         </p>\r\n                         <br />\r\n                         <form onSubmit = { this.onHandleSubmit }>\r\n                              <label htmlFor=\"username\">Username </label>\r\n                              <input \r\n                                   type=\"text\"\r\n                                   name=\"username\"\r\n                                   value={this.state.username}\r\n                                   onChange={this.onHandleChange}\r\n                                   required\r\n                              /> \r\n                              <br />\r\n                              <br />\r\n                              <label htmlFor=\"username\">Password </label>\r\n                              <input\r\n                                   type=\"password\"\r\n                                   name=\"password\"\r\n                                   value={this.state.password}\r\n                                   onChange={this.onHandleChange}\r\n                                   required\r\n                              /> \r\n                              <br />\r\n                              <br />\r\n\r\n                              <button id=\"regBtn\" type=\"submit\">REGISTER</button>\r\n                         </form>\r\n                    </div>\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default Registration;","import React, { Component } from \"react\";\r\nimport Registration from '../component/Registration.js';\r\n\r\nclass Register extends Component {\r\n     render = () => {\r\n          return (\r\n               <div>\r\n                    <Registration />\r\n               </div>\r\n          );\r\n     }\r\n}\r\n\r\nexport default Register;","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Homepage from './pages/homepage';\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Login from './pages/loginpage';\r\nimport Register from './pages/register';\r\n\r\nclass App extends Component {\r\n     render = () => {\r\n          return (\r\n               <Router>\r\n                    <Switch> \r\n                         <Route exact path=\"/\" component = { Homepage } />\r\n                         <Route exact path=\"/homepage\" component = { Homepage } />\r\n                         <Route exact path=\"/login\" component = { Login } />\r\n                         <Route exact path=\"/register\" component={ Register } />\r\n                    </Switch>\r\n               </Router>\r\n          );\r\n     }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <App />, \r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}